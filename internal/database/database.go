package database

import (
	"fmt"
	"log"
	"os"
	"time"

	"food-delivery-app/internal/models"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

var DB *gorm.DB

func InitDatabase() {
	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π IP –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	hosts := []string{
		"127.0.0.1",
		"localhost",
	}
	port := getEnv("DB_PORT", "5433")
	user := getEnv("DB_USER", "app_user")
	password := getEnv("DB_PASSWORD", "secret")
	dbname := getEnv("DB_NAME", "app_db")
	sslmode := getEnv("DB_SSLMODE", "disable")

	var database *gorm.DB
	var err error

	for _, host := range hosts {
		dsn := fmt.Sprintf(
			"host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
			host, port, user, password, dbname, sslmode,
		)

		log.Printf("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫: %s:%s", host, port)

		database, err = gorm.Open(postgres.Open(dsn), &gorm.Config{
			Logger: logger.Default.LogMode(logger.Silent),
		})

		if err == nil {
			sqlDB, testErr := database.DB()
			if testErr == nil {
				if pingErr := sqlDB.Ping(); pingErr == nil {
					log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ %s:%s!", host, port)
					break
				}
			}
		}

		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ %s: %v", host, err)
	}

	if err != nil {
		log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∞–¥—Ä–µ—Å—É PostgreSQL")
	}

	sqlDB, err := database.DB()
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç sql.DB:", err)
	}

	sqlDB.SetMaxIdleConns(10)
	sqlDB.SetMaxOpenConns(100)
	sqlDB.SetConnMaxLifetime(time.Hour)

	DB = database
	log.Println("üéâ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	seedData()
}

func seedData() {
	log.Println("üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
	var categoryCount int64
	DB.Model(&models.Category{}).Count(&categoryCount)

	if categoryCount > 0 {
		log.Println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
		return
	}

	log.Println("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")

	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
	categories := []models.Category{
		{Name: "–ë—É—Ä–≥–µ—Ä—ã"},
		{Name: "–ù–∞–ø–∏—Ç–∫–∏"},
		{Name: "–î–µ—Å–µ—Ä—Ç—ã"},
		{Name: "–ó–∞–∫—É—Å–∫–∏"},
	}

	for _, cat := range categories {
		result := DB.Create(&cat)
		if result.Error != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %s: %v", cat.Name, result.Error)
		}
	}

	// –¢–æ–≤–∞—Ä—ã
	products := []models.Product{
		{Name: "–ë–∏–≥ –ú–∞–∫", Description: stringPtr("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±—É—Ä–≥–µ—Ä —Å –¥–≤—É–º—è –∫–æ—Ç–ª–µ—Ç–∞–º–∏"), Price: 299.00, CategoryID: intPtr(1)},
		{Name: "–ß–∏–∑–±—É—Ä–≥–µ—Ä", Description: stringPtr("–ë—É—Ä–≥–µ—Ä —Å —Å—ã—Ä–æ–º –∏ –∫–æ—Ç–ª–µ—Ç–æ–π"), Price: 149.00, CategoryID: intPtr(1)},
		{Name: "–†–æ—è–ª –ß–∏–∑–±—É—Ä–≥–µ—Ä", Description: stringPtr("–ë–æ–ª—å—à–æ–π –±—É—Ä–≥–µ—Ä —Å –±–µ–∫–æ–Ω–æ–º"), Price: 259.00, CategoryID: intPtr(1)},
		{Name: "–ö–æ–∫–∞-–ö–æ–ª–∞", Description: stringPtr("–û—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ 0.5–ª"), Price: 89.00, CategoryID: intPtr(2)},
		{Name: "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å", Description: stringPtr("–í–∞–Ω–∏–ª—å–Ω—ã–π –º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å"), Price: 159.00, CategoryID: intPtr(2)},
		{Name: "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫", Description: stringPtr("–°–≤–µ–∂–µ–≤—ã–∂–∞—Ç—ã–π —Å–æ–∫ 0.3–ª"), Price: 129.00, CategoryID: intPtr(2)},
		{Name: "–Ø–±–ª–æ—á–Ω—ã–π –ø–∏—Ä–æ–≥", Description: stringPtr("–¢–µ–ø–ª—ã–π —è–±–ª–æ—á–Ω—ã–π –ø–∏—Ä–æ–≥"), Price: 99.00, CategoryID: intPtr(3)},
		{Name: "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ", Description: stringPtr("–í–∞–Ω–∏–ª—å–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ"), Price: 79.00, CategoryID: intPtr(3)},
		{Name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏", Description: stringPtr("–•—Ä—É—Å—Ç—è—â–∏–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏"), Price: 129.00, CategoryID: intPtr(4)},
		{Name: "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã", Description: stringPtr("6 –∫—É—Å–æ—á–∫–æ–≤ –Ω–∞–≥–≥–µ—Ç—Å–æ–≤"), Price: 189.00, CategoryID: intPtr(4)},
	}

	for _, prod := range products {
		result := DB.Create(&prod)
		if result.Error != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ %s: %v", prod.Name, result.Error)
		}
	}

	log.Println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
func stringPtr(s string) *string {
	return &s
}

func intPtr(i int) *int {
	return &i
}

func GetDB() *gorm.DB {
	return DB
}

func CloseDB() {
	sqlDB, err := DB.DB()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ sql.DB: %v", err)
		return
	}

	if err := sqlDB.Close(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: %v", err)
	} else {
		log.Println("üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
